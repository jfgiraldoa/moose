[Tests]
  [./CahnHilliard]
    type = 'Exodiff'
    input = 'CahnHilliard.i'
    exodiff = 'CahnHilliard_out.e'
    issues = '#3356'
    design = '/CahnHilliard.md'
    requirement = 'MOOSE shall provide a non-split Cahn-Hilliard formalism'
  [../]

  [./SplitCahnHilliard]
    type = 'Exodiff'
    input = 'SplitCahnHilliard.i'
    exodiff = 'SplitCahnHilliard_out.e'
    issues = '#3356'
    design = '/SplitCHParsed.md'
    requirement = 'MOOSE shall provide a split Cahn-Hilliard formalism'
  [../]
  [./ADSplitCahnHilliard]
    type = 'Exodiff'
    input = 'ADSplitCahnHilliard.i'
    exodiff = 'SplitCahnHilliard_out.e'
    prereq = SplitCahnHilliard
    issues = '#13138'
    design = '/ADSplitCHParsed.md'
    requirement = 'MOOSE shall provide an AD version of the split Cahn-Hilliard formalism'
  [../]
  [./ADSplitCahnHilliard-jac]
    type = 'PetscJacobianTester'
    input = 'ADSplitCahnHilliard.i'
    run_sim = 'True'
    cli_args = 'Outputs/exodus=false Executioner/num_steps=2'
    ratio_tol = 1e-8
    difference_tol = 1e-4
    petsc_version = '<3.9.0 || >=3.9.4'
    issues = '#13138'
    design = '/ADSplitCHParsed.md'
    requirement = 'The Jacobian for the AD split Cahn-Hilliard problem shall be perfect'
  [../]

  [./AllenCahn]
    type = 'Exodiff'
    input = 'AllenCahn.i'
    exodiff = 'AllenCahn_out.e'
    issues = '#3816'
    design = '/AllenCahn.md'
    requirement = 'A Allen-Cahn phase field formulation shall be provided'
  [../]
  [./analyzejacobian_AllenCahn]
    type = 'AnalyzeJacobian'
    input = 'AllenCahn.i'
    prereq = 'CoupledAllenCahn'
    expect_out = '\nNo errors detected. :-\)\n'
    resize_mesh = true
    recover = false
    petsc_version = '<3.9.0 || >=3.9.4'
    issues = '#3816'
    design = '/AllenCahn.md'
    requirement = 'The Allen-Cahn model shall have perfect Jacobians'
  [../]

  [./AllenCahnVariableL]
    type = 'Exodiff'
    input = 'AllenCahnVariableL.i'
    exodiff = 'AllenCahnVariableL_out.e'
    issues = '#3816'
    design = '/AllenCahn.md'
    requirement = 'A Allen-Cahn phase field formulation with a variable dependent mobility shall be provided'
  [../]

  [./ADAllenCahn]
    type = 'Exodiff'
    input = 'ADAllenCahn.i'
    allow_test_objects = true
    exodiff = 'ADAllenCahn_out.e'
    issues = '#13197'
    design = '/ADAllenCahn.md'
    requirement = 'An AD version of the Allen-Cahn phase field formulation shall be provided'
  [../]
  [./ADAllenCahn-jac]
    type = 'PetscJacobianTester'
    input = 'ADAllenCahn.i'
    allow_test_objects = true
    run_sim = 'True'
    cli_args = 'Outputs/exodus=false Executioner/num_steps=1'
    ratio_tol = 1e-7
    difference_tol = 1e-5
    issues = '#13197'
    design = '/ADAllenCahn.md'
    requirement = 'The Jacobian for the AD Allen-Cahn problem shall be perfect'
  [../]

  [./ADAllenCahnVariableL]
    type = 'Exodiff'
    input = 'ADAllenCahnVariableL.i'
    allow_test_objects = true
    exodiff = 'ADAllenCahnVariableL_out.e'
    issues = '#13197'
    design = '/ADAllenCahn.md'
    requirement = 'An AD version of the Allen-Cahn phase field formulation with a variable dependent mobility shall be provided'
  [../]
  [./ADAllenCahnVariableL-jac]
    type = 'PetscJacobianTester'
    input = 'ADAllenCahnVariableL.i'
    allow_test_objects = true
    run_sim = 'True'
    cli_args = 'Outputs/exodus=false Executioner/num_steps=1'
    ratio_tol = 1e-7
    difference_tol = 1e-5
    issues = '#13197'
    design = '/ADAllenCahn.md'
    requirement = 'The Jacobian for the AD Allen-Cahn problem with a variable dependent mobility shall be perfect'
  [../]


  # This coupled formulation should give the same result as the direct Allen-Cahn
  [./CoupledAllenCahn]
    type = 'Exodiff'
    prereq = 'AllenCahn'
    input = 'CoupledAllenCahn.i'
    exodiff = 'AllenCahn_out.e'
    issues = '#6194'
    design = '/CoupledAllenCahn.md'
    requirement = 'A coupled Allen-Cahn formulation shall be provided'
  [../]

  # This is also a coupled formulation of Allen-Cahn equation, using variable mobility
  # Primarily here to test CoupledCoefReaction kernel
  [./CoupledCoefAllenCahn]
    type = 'Exodiff'
    input = 'CoupledCoefAllenCahn.i'
    exodiff = 'CoupledCoefAllenCahn_out.e'
    issues = '#6265'
    design = '/CoupledCoefAllenCahn.md'
    requirement = 'A coupled Allen-Cahn formulation with a user defined prefactor shall be provided'
  [../]

  [./MatGradSquareCoupled]
    type = 'Exodiff'
    input = 'MatGradSquareCoupled.i'
    exodiff = 'MatGradSquareCoupled_out.e'
    issues = '#10721'
    design = '/MatGradSquareCoupled.md'
    requirement = 'A coupled gradient square kernel shall be provided'
  [../]

  [./SimpleSplitCHWRes]
    type = 'Exodiff'
    input = 'SimpleSplitCHWRes.i'
    exodiff = 'SimpleSplitCHWRes_out.e'
    issues = '#6910'
    design = '/SimpleSplitCHWRes.md'
    requirement = 'A suite of simple to understand phase field kernels shall be provided for novice users'
  [../]

  [./SimpleCHInterface]
    type = 'Exodiff'
    input = 'SimpleCHInterface.i'
    exodiff = 'SimpleCHInterface_out.e'
    issues = '#6910'
    design = '/SimpleCHInterface.md'
    requirement = 'A suite of simple to understand phase field kernels shall be provided for novice users'
  [../]

  [./ACInterfaceStress]
    type = 'Exodiff'
    input = 'ACInterfaceStress.i'
    exodiff = 'ACInterfaceStress_out.e'
    cli_args = 'Executioner/dt=0.001'
    issues = '#9658'
    design = '/ACInterfaceStress.md'
    requirement = 'A free energy contribution from elastic stresses in interfaces shall be provided'
  [../]

  [./analyzejacobian_ACInterfaceStress]
    type = 'AnalyzeJacobian'
    input = 'ACInterfaceStress_jacobian.i'
    expect_out = '\nNo errors detected. :-\)\n'
    recover = false
    heavy = true
    issues = '#9658'
    design = '/ACInterfaceStress.md'
    requirement = 'The free energy contribution from elastic stresses in interfaces shall shall have a perfect Jacobian'
  [../]

  [./nonuniform_barrier_coefficient]
    type = 'Exodiff'
    input = 'nonuniform_barrier_coefficient.i'
    exodiff = 'nonuniform_barrier_coefficient_out.e'
    issues = '#11829'
    design = '/ACBarrierFunction.md'
    requirement = 'The barrier height and gradient energy parameter must be permitted to depend on non-linear variables'
  [../]
[]
