[Tests]
  [./nemesis_out_test]
    type = 'CheckFiles'
    input = 'output_test_nemesis.i'
    check_files = 'out.e.1.0'
    # If you run on more processors, it changes the output filename to
    # e.g. out.e.2.0 and out.e.2.1, so this test will only pass if you
    # run it on one processor.
    max_parallel = 1
    min_parallel = 1
    issues = '#920'
    design = 'Nemesis.md'
    requirement = 'Nemesis output shall work'
  [../]

  [./gmv_out_test]
    type = 'CheckFiles'
    input = 'output_test_gmv.i'
    check_files = 'output_test_gmv_out_0000.gmv'
    recover = false
    issues = '#920'
    design = 'GMVOutput.md'
    requirement = 'GMV output shall work'
  [../]

  [./yaml_dump_test]
    type = 'RunApp'
    input = 'IGNORED'
    expect_out = 'START YAML DATA.*END YAML DATA'
    cli_args = '--yaml'
    # suppress error checking, the word 'ERROR' shows up in the yaml dump
    errors = 'zzzzzzzzzz'
    issues = '#920'
    design = 'YAMLFormatter.md'
    requirement = 'We shall be able to dump YAML data'
  [../]

  [./no_double_executioner_output]
    type = 'RunApp'
    input = 'IGNORED'
    absent_out = '/Executioner/\<type\>/Transient.*/Executioner/\<type\>/Transient'
    # suppress error checking, the word 'ERROR' shows up in the yaml dump
    errors = 'zzzzz zzzzz'
    cli_args = '--yaml /Executioner'
    issues = '#2855'
    design = 'YAMLFormatter.md'
    requirement = 'Executioner output shall only be given once'
  [../]

  [./tecplot_out_test]
    type = 'CheckFiles'
    input = 'output_test_tecplot.i'
    check_files = 'output_test_tecplot_out_0000.dat'
    design = 'Tecplot.md'
    requirement = 'Tecplot output shall work'
    issues = '#920'
  [../]

  [./tecplot_bin_test]
    type = 'CheckFiles'
    input = 'output_test_tecplot_binary.i'
    check_files = 'output_test_tecplot_binary_out_0000.plt'
    tecplot = true
    issues = '#3403'
    design = 'Tecplot.md'
    requirement = 'If tecplot api is available, tecplot output will be given in tecplot binary format'
  [../]

  [./tecplot_bin_test_override]
    type = 'CheckFiles'
    input = 'output_test_tecplot_binary.i'
    check_files = 'output_test_tecplot_binary_out_0000.dat'
    tecplot = false
    allow_warnings = true
    design = 'Tecplot.md'
    issues = '#3403'
    requirement = 'If tecplot api is not available, tecplot output will be given in ASCII format'
  [../]

  [./gnuplot_ps_out_test]
    type = 'CheckFiles'
    input = 'output_test_gnuplot_ps.i'
    check_files = 'output_test_gnuplot_ps_out.gp output_test_gnuplot_ps_out.dat'
    issues = '#920'
    design = 'Gnuplot.md'
    requirement = 'We shall be able to generate gnuplot postscript output'
  [../]

  [./gnuplot_png_out_test]
    type = 'CheckFiles'
    input = 'output_test_gnuplot.i'
    check_files = 'output_test_gnuplot_out.gp output_test_gnuplot_out.dat'
    issues = '#920'
    design = 'Gnuplot.md'
    requirement = 'We shall be able to generate gnuplot png output'
  [../]

  [./gnuplot_gif_out_test]
    type = 'CheckFiles'
    input = 'output_test_gnuplot_gif.i'
    check_files = 'output_test_gnuplot_gif_out.gp output_test_gnuplot_gif_out.dat'
    issues = '#920'
    design = 'Gnuplot.md'
    requirement = 'We shall be able to generate gnuplot gif output'
  [../]

  [./pps_screen_out_warn_test]
    type = 'RunApp'
    input = 'pps_screen_out_warn.i'
    expect_out = "A Postprocessor utilizes the 'outputs' parameter; however, postprocessor output is disabled for the 'console' output object."
    allow_warnings = true
    max_parallel = 1 # warning can mix on multiple processes
    issues = '#1426'
    design = 'Outputs/index.md'
    requirement = 'If a postprocessor utilizes the "outputs" parameter, but postprocessor output is disable for the console object, we shall warn the user'
  [../]

  [./show_input_test]
    type = 'RunApp'
    input = 'output_test_gmv.i'
    expect_out = 'type\s*=\s*GeneratedMesh'
    cli_args = '--show-input'
    prereq = 'gmv_out_test'
    issues = '#1404 #1131'
    design = 'command_line_usage.md'
    requirement = '--show-input shall print parameters'
  [../]

  [./sln_out_test]
    type = 'CheckFiles'
    input = 'output_test_sln.i'
    check_files = 'output_test_sln_out.slh'
    design = 'SolutionHistory.md'
    requirement = 'Solution history output shall work'
    issues = '#920'
  [../]

  [./xdr_output]
    type = 'CheckFiles'
    input = 'output_test_xdr.i'
    check_files = 'output_test_xdr_out_0001.xdr output_test_xdr_out_0001_mesh.xdr'
    design = 'XDA.md'
    issues = '#2243'
    requirement = 'MOOSE shall support XDR output'
  [../]

  [./json_full]
    type = 'PythonUnitTest'
    input = 'test_json.py'
    test_case = "TestFull"
    max_buffer_size = -1
    issues = '#7855 #7661 #2881 #10839 #12455'
    design = 'JsonInputFileFormatter.md command_line_usage.md'
    requirement = 'The system shall be able to dump input file syntax in JSON format'
  [../]

  [./json_no_test_objects]
    type = 'PythonUnitTest'
    input = 'test_json.py'
    test_case = "TestNoTestObjects"
    max_buffer_size = -1
    issues = '#7855 #7661 #2881 #10839 #12455'
    design = 'JsonInputFileFormatter.md command_line_usage.md'
    requirement = 'The system shall be able to dump input file syntax in JSON format and exclude test object syntax.'
  [../]

  [./json_search]
    type = 'PythonUnitTest'
    input = 'test_json.py'
    test_case = "TestSearch"
    max_buffer_size = -1
    issues = '#7855 #7661 #2881 #10839 #12455'
    design = 'JsonInputFileFormatter.md command_line_usage.md'
    requirement = 'The system shall be able to dump a subset of JSON formatted syntax.'
  [../]

  [./json_line_info]
    type = 'PythonUnitTest'
    input = 'test_json.py'
    test_case = "TestLineInfo"
    max_buffer_size = -1
    issues = '#7855 #7661 #2881 #10839 #12455'
    design = 'JsonInputFileFormatter.md command_line_usage.md'
    requirement = 'The system shall dump line information along with JSON formatted syntax.'
  [../]

  [./hit]
    type = 'PythonUnitTest'
    input = 'test_hit_output.py'
    test_case = 'TestInputFileFormat'
    max_buffer_size = -1
    issues = '#7855 #7661 #2881 #10839 #12455'
    design = 'JsonInputFileFormatter.md command_line_usage.md'
    requirement = 'The system shall be able to dump input file (HIT) syntax.'
  [../]

  [./hit_search]
    type = 'PythonUnitTest'
    input = 'test_hit_output.py'
    test_case = 'TestInputFileFormatSearch'
    max_buffer_size = -1
    issues = '#7855 #7661 #2881 #10839 #12455'
    design = 'JsonInputFileFormatter.md command_line_usage.md'
    requirement = 'The system shall be able to dump a subset of input file (HIT) syntax.'
  [../]

  [./definition_existsin_test]
    type = 'RunApp'
    input = 'IGNORED'
    expect_out = 'ExistsIn=\[\s*?EXTRA:"all"\s*?EXTRA:"none"\s*?"../../../../../Outputs/["*"]/decl"\s*?\]'
    cli_args = '--definition'
    # suppress error checking, the word 'ERROR' shows up in the definition dump
    errors = 'zzzzzzzzzz'
    max_buffer_size = -1
    issues = '#9651'
    requirement = 'MOOSE shall be able to convert a JsonSyntaxTree into Standard Object Notation (SON) for use by the NEAMS workbench. Check ExistsIn'
    design = 'SONDefinitionFormatter.md'
  [../]

  [./definition_childatleastone_test]
    type = 'RunApp'
    input = 'IGNORED'
    expect_out = 'ChildAtLeastOne=\[\s*?"../../../GlobalParams/inside/value"\s*?"inside/value"\s*?\]'
    cli_args = '--definition'
    # suppress error checking, the word 'ERROR' shows up in the definition dump
    errors = 'zzzzzzzzzz'
    max_buffer_size = -1
    issues = '#9651'
    requirement = 'MOOSE shall be able to convert a JsonSyntaxTree into Standard Object Notation (SON) for use by the NEAMS workbench. Check ChildAtLeastOne'
    design = 'SONDefinitionFormatter.md'
  [../]

  [./definition_valenum_test]
    type = 'RunApp'
    input = 'IGNORED'
    expect_out = '\'execute_on\'{[^{]*{[^}]*ValEnums=\[ "NONE" "INI[^]]*?GIN" "FINAL" "CUSTOM"[^]]*\][^}]*}[^}]*} % end parameter execute_on'
    cli_args = '--definition'
    # suppress error checking, the word 'ERROR' shows up in the definition dump
    errors = 'zzzzzzzzzz'
    max_buffer_size = -1
    issues = '#9651'
    requirement = 'MOOSE shall be able to convert a JsonSyntaxTree into Standard Object Notation (SON) for use by the NEAMS workbench. Check ValEnums'
    design = 'SONDefinitionFormatter.md'
  [../]

  [./definition_active_parameter_test]
    type = 'RunApp'
    input = 'IGNORED'
    expect_out = '\'active\'{.*?Description="If specified.*?made active".*?\'value\'{.*?InputDefault="__all__".*?} % end parameter active'
    cli_args = '--definition'
    # suppress error checking, the word 'ERROR' shows up in the definition dump
    errors = 'zzzzzzzzzz'
    max_buffer_size = -1
    issues = '#9651'
    requirement = 'MOOSE shall be able to convert a JsonSyntaxTree into Standard Object Notation (SON) for use by the NEAMS workbench. Check active parameter'
    design = 'SONDefinitionFormatter.md'
  [../]

  [./definition_normal_sub_test]
    type = 'RunApp'
    input = 'IGNORED'
    expect_out = '\'Indicators\'{.*?InputTmpl=MooseBlock.*?InputName="Indicators".*?InputType=normal_sub.*?InputDefault="Indicators"'
    cli_args = '--definition'
    # suppress error checking, the word 'ERROR' shows up in the definition dump
    errors = 'zzzzzzzzzz'
    max_buffer_size = -1
    issues = '#9651'
    requirement = 'MOOSE shall be able to convert a JsonSyntaxTree into Standard Object Notation (SON) for use by the NEAMS workbench. Check normal_sub'
    design = 'SONDefinitionFormatter.md'
  [../]

  [./definition_type_sub_test]
    type = 'RunApp'
    input = 'IGNORED'
    expect_out = '\'CircleMarker_type\'{.*?InputType=type_sub.*?InputDefault="insert_name_here".*?} % end block CircleMarker_type'
    cli_args = '--definition'
    # suppress error checking, the word 'ERROR' shows up in the definition dump
    errors = 'zzzzzzzzzz'
    max_buffer_size = -1
    issues = '#9651'
    requirement = 'MOOSE shall be able to convert a JsonSyntaxTree into Standard Object Notation (SON) for use by the NEAMS workbench. Check type_sub'
    design = 'SONDefinitionFormatter.md'
  [../]

  [./definition_default_type_test]
    type = 'RunApp'
    input = 'IGNORED'
    expect_out = '\'BoxMarker_type\'{.*?\'type\'{.*?\'value\'{.*?InputDefault="BoxMarker".*?}.*?} % end parameter type.*?} % end block BoxMarker_type'
    cli_args = '--definition'
    # suppress error checking, the word 'ERROR' shows up in the definition dump
    errors = 'zzzzzzzzzz'
    max_buffer_size = -1
    issues = '#9651'
    requirement = 'MOOSE shall be able to convert a JsonSyntaxTree into Standard Object Notation (SON) for use by the NEAMS workbench. Check default type'
    design = 'SONDefinitionFormatter.md'
  [../]

  [./definition_minvalinc_inputdefault_test]
    type = 'RunApp'
    input = 'IGNORED'
    expect_out = '\'cycles_per_step\'{.*?\'value\'{.*?MinValInc=0.*?InputDefault="1".*?} % end parameter cycles_per_step'
    cli_args = '--definition'
    # suppress error checking, the word 'ERROR' shows up in the definition dump
    errors = 'zzzzzzzzzz'
    max_buffer_size = -1
    issues = '#9651'
    requirement = 'MOOSE shall be able to convert a JsonSyntaxTree into Standard Object Notation (SON) for use by the NEAMS workbench. Check MinValInc'
    design = 'SONDefinitionFormatter.md'
  [../]

  [./definition_expressions_are_okay_test]
    type = 'RunApp'
    input = 'IGNORED'
    expect_out = '\'function\'{.*\'value\'{.*ExistsIn=\[\s*EXTRA:"ExpressionsAreOkay"\s*"../../../../../Functions/["*"]/decl"\s*\].*}.*} % end parameter function'
    cli_args = '--definition'
    # suppress error checking, the word 'ERROR' shows up in the definition dump
    errors = 'zzzzzzzzzz'
    max_buffer_size = -1
    issues = '#9651'
    requirement = 'MOOSE shall be able to convert a JsonSyntaxTree into Standard Object Notation (SON) for use by the NEAMS workbench. Check ExpressionsAreOkay'
    design = 'SONDefinitionFormatter.md'
  [../]
[]
